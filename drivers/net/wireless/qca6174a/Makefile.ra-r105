# Build list

targetList := drivers drivers_firmware
targetList += bt_target wpa_supplicant hostapd rootfs_build 

default: ${targetList}
wlan_tf_obj: drivers drivers_firmware rootfs_build
#################################################################################################################################
export ROOTFS_PATH=${ATH_TOPDIR}/rootfs-${BOARD_TYPE}.build
export WLAN_DRIVER_TOPDIR=$(ATH_TOPDIR)/drivers
export ATHDIAG_TOPDIR=${ATH_TOPDIR}/drivers/qcacld-new/tools/athdiag
export BSP_PATCH_FILE_TOPDIR=${ATH_TOPDIR}/drivers/patches
export BT_PATCH_FILE_TOPDIR=${BSP_PATCH_FILE_TOPDIR}/${BOARD_TYPE}/BT
export BUILD_OUTPUT_BT_DIR=${ATH_TOPDIR}/build/out/BT

#################################################################################################################################
#
# custom patch
custom_patch_rome_pci:
	@echo Patch drivers
	@cd ${WLAN_DRIVER_TOPDIR}/backports && patch -s -p1 < ${WLAN_DRIVER_TOPDIR}/patches/${BOARD_TYPE}/0001-cfg80211-Add-AP-stopped-interface.patch
	@cd ${WLAN_DRIVER_TOPDIR}/backports && patch -s -p1 < ${WLAN_DRIVER_TOPDIR}/patches/${BOARD_TYPE}/0002-cfg80211-Reset-beacon-interval-when-stop-AP-fails.patch
	@cd ${WLAN_DRIVER_TOPDIR}/backports && patch -s -p1 < ${WLAN_DRIVER_TOPDIR}/patches/${BOARD_TYPE}/0003-Revert-cfg80211-mac80211-disconnect-on-suspend.patch
	@cd ${WLAN_DRIVER_TOPDIR}/backports && patch -s -p1 < ${WLAN_DRIVER_TOPDIR}/patches/${BOARD_TYPE}/0004-cfg80211-Add-new-wiphy-flag-WIPHY_FLAG_DFS_OFFLOAD.patch
	@cd ${WLAN_DRIVER_TOPDIR}/backports && patch -s -p1 < ${WLAN_DRIVER_TOPDIR}/patches/${BOARD_TYPE}/0005-cfg80211-export-regulatory_hint_user-API.patch
	@cd ${WLAN_DRIVER_TOPDIR}/backports && patch -s -p1 < ${WLAN_DRIVER_TOPDIR}/patches/${BOARD_TYPE}/0006-mac80211-implement-HS2.0-gratuitous-ARP-unsolicited.patch
ifeq ($(ENG_PATCH),1)
	@cd ${WLAN_DRIVER_TOPDIR}/backports && patch -s -p1 < ${WLAN_DRIVER_TOPDIR}/patches/${BOARD_TYPE}/0007-add-db.txt-for-regulatory-domains-use.patch
else
	cp ${WLAN_DRIVER_TOPDIR}/backports/net/wireless/db.txt  ${WLAN_DRIVER_TOPDIR}/backports/net/wireless/db.txt.old
	cp -rf ${WLAN_DRIVER_TOPDIR}/patches/${BOARD_TYPE}/0007-add-db.txt  ${WLAN_DRIVER_TOPDIR}/backports/net/wireless/db.txt
endif
	#@cd ${WLAN_DRIVER_TOPDIR}/backports && patch -s -p1 < ${WLAN_DRIVER_TOPDIR}/patches/${BOARD_TYPE}/0008-backports-kconf-fix.patch
	@cd ${WLAN_DRIVER_TOPDIR}/qcacld-new && patch -s -p0 < ${WLAN_DRIVER_TOPDIR}/patches/${BOARD_TYPE}/0009-qca-cld-driver-no-touch-cfg80.patch
	@cd ${WLAN_DRIVER_TOPDIR}/qcacld-new && patch -s -p1 < ${WLAN_DRIVER_TOPDIR}/patches/${BOARD_TYPE}/0010-qca-cld-driver-build-fix.patch

custom_unpatch_rome_pci:
	@echo Revert drivers patch
	@cd ${WLAN_DRIVER_TOPDIR}/qcacld-new && patch -R -p1 < ${WLAN_DRIVER_TOPDIR}/patches/${BOARD_TYPE}/0010-qca-cld-driver-build-fix.patch
	@cd ${WLAN_DRIVER_TOPDIR}/qcacld-new && patch -R -p0 < ${WLAN_DRIVER_TOPDIR}/patches/${BOARD_TYPE}/0009-qca-cld-driver-no-touch-cfg80.patch
	#@cd ${WLAN_DRIVER_TOPDIR}/backports && patch -R -p1 < ${WLAN_DRIVER_TOPDIR}/patches/${BOARD_TYPE}/0008-backports-kconf-fix.patch
ifeq ($(ENG_PATCH),1)
	@cd ${WLAN_DRIVER_TOPDIR}/backports && patch -R -p1 < ${WLAN_DRIVER_TOPDIR}/patches/${BOARD_TYPE}/0007-add-db.txt-for-regulatory-domains-use.patch
else
	cp -rf ${WLAN_DRIVER_TOPDIR}/backports/net/wireless/db.txt.old ${WLAN_DRIVER_TOPDIR}/backports/net/wireless/db.txt
endif
	@cd ${WLAN_DRIVER_TOPDIR}/backports && patch -R -p1 < ${WLAN_DRIVER_TOPDIR}/patches/${BOARD_TYPE}/0006-mac80211-implement-HS2.0-gratuitous-ARP-unsolicited.patch 
	@cd ${WLAN_DRIVER_TOPDIR}/backports && patch -R -p1 < ${WLAN_DRIVER_TOPDIR}/patches/${BOARD_TYPE}/0005-cfg80211-export-regulatory_hint_user-API.patch
	@cd ${WLAN_DRIVER_TOPDIR}/backports && patch -R -p1 < ${WLAN_DRIVER_TOPDIR}/patches/${BOARD_TYPE}/0004-cfg80211-Add-new-wiphy-flag-WIPHY_FLAG_DFS_OFFLOAD.patch
	@cd ${WLAN_DRIVER_TOPDIR}/backports && patch -R -p1 < ${WLAN_DRIVER_TOPDIR}/patches/${BOARD_TYPE}/0003-Revert-cfg80211-mac80211-disconnect-on-suspend.patch
	@cd ${WLAN_DRIVER_TOPDIR}/backports && patch -R -p1 < ${WLAN_DRIVER_TOPDIR}/patches/${BOARD_TYPE}/0002-cfg80211-Reset-beacon-interval-when-stop-AP-fails.patch
	@cd ${WLAN_DRIVER_TOPDIR}/backports && patch -R -p1 < ${WLAN_DRIVER_TOPDIR}/patches/${BOARD_TYPE}/0001-cfg80211-Add-AP-stopped-interface.patch

#################################################################################################################################

#
# athdiag
#
athdiag_build: rootfs_prep athdiag_clean
	@echo Build athdiag tool
	cd $(ATHDIAG_TOPDIR) && \
	${MAKEARCH} && \
	cp $(ATHDIAG_TOPDIR)/athdiag $(INSTALL_ROOT)/sbin

athdiag_clean:
	@echo Clean athdiag tool
	cd $(ATHDIAG_TOPDIR) && \
	${MAKEARCH} clean

bt_clean_src:
	@echo rm the bluedroid/ hardware/xxx vendor/qcom
	cd ${CUST_PROJ_PATH} && \
	rm -rf external/bluetooth/bluedroid && \
	rm -rf hardware/qcom/bt && \
	rm -rf vendor/qcom
#	tar cfz external/bluetooth/bluedroid.bak.tar.gz external/bluetooth/bluedroid && \
#	tar cfz hardware/qcom/bt.bak.tar.gz hardware/qcom/bt && \
#	tar cfz vendor/qcom.bak.tar.gz vendor/qcom && \
#	mv hardware/libhardware/include/hardware/bluetooth.h hardware/libhardware/include/hardware/bluetooth.bak.h && \
#	mv device/qcom/common/bdroid_buildcfg.h device/qcom/common/bdroid_buildcfg.bak.h && \

bt_prepare_codebase: bt_clean_src
	@echo prepare bluedroid codebase
	cp -r ${ATH_TOPDIR}/apps/bluedroid ${CUST_PROJ_PATH}/external/bluetooth/
	rm -rf ${CUST_PROJ_PATH}/external/bluetooth/bluedroid/test
	@echo prepare bluedroid codebase done
	@echo prepare hardware bt codebase
	cp -r ${ATH_TOPDIR}/apps/bt ${CUST_PROJ_PATH}/hardware/qcom/
	cp ${ATH_TOPDIR}/apps/libhardware/include/hardware/bluetooth.h ${CUST_PROJ_PATH}/hardware/libhardware/include/hardware/
	@echo prepare hardware bt codebase done
	@echo prepare vendor bt codebase
	tar xvf ${BT_PATCH_FILE_TOPDIR}/vendor.tar.gz -C ${CUST_PROJ_PATH}/ vendor/qcom
	@echo prepare vendor bt codebase done
	@echo prepare bdroid_buildcfg.h 
	cp ${ATH_TOPDIR}/apps/common/bdroid_buildcfg.h ${CUST_PROJ_PATH}/device/qcom/common
	@echo prepare bdroid_buildcfg.h done

bt_cp_patch: bt_prepare_codebase
	@echo copy Bluetooth patch to workspace
	cp ${BT_PATCH_FILE_TOPDIR}/bluedroid.patch ${CUST_PROJ_PATH}/external/bluetooth/bluedroid
	cp ${BSP_PATCH_FILE_TOPDIR}/bt_host_ver.h ${BT_PATCH_FILE_TOPDIR}/
	cp ${BT_PATCH_FILE_TOPDIR}/bt_host_ver.h ${CUST_PROJ_PATH}/external/bluetooth/bluedroid/include
	cp ${BT_PATCH_FILE_TOPDIR}/hardware.patch ${CUST_PROJ_PATH}/hardware/libhardware/include/hardware
	cp ${BT_PATCH_FILE_TOPDIR}/libbt-vendor.patch ${CUST_PROJ_PATH}/hardware/qcom/bt/libbt-vendor
	@echo copy Bluetooth patch done	

bt_patch_bluedroid:
	@echo patch bluedroid
	cd ${CUST_PROJ_PATH}/external/bluetooth/bluedroid && \
	patch -p1 < bluedroid.patch
	@echo patch bluedroid done

bt_patch_hardware:
	@echo patch hardware
	cd ${CUST_PROJ_PATH}/hardware/libhardware/include/hardware && \
	patch -p4 < hardware.patch
	cd ${CUST_PROJ_PATH}/hardware/qcom/bt/libbt-vendor && \
	patch -p4 < libbt-vendor.patch
	@echo patch hardware done
	
bt_target: bt_cp_patch bt_patch_bluedroid bt_patch_hardware
	@echo build android bluetooth user components
	cd ${CUST_PROJ_PATH} && \
	source build/envsetup.sh && \
	lunch 29 && \
	cd external/bluetooth/bluedroid && mma && \
	cd ${CUST_PROJ_PATH} && \
	cd vendor/qcom/proprietary/bt/wcnss_filter && mma
	mkdir -p ${BUILD_OUTPUT_BT_DIR}
	cp ${CUST_PROJ_PATH}/out/target/product/msm8994/obj_arm/lib/bluetooth.default.so ${BUILD_OUTPUT_BT_DIR}/
	cp ${CUST_PROJ_PATH}/out/target/product/msm8994/obj_arm/lib/libbt*.so ${BUILD_OUTPUT_BT_DIR}/
	cp ${CUST_PROJ_PATH}/out/target/product/msm8994/obj/EXECUTABLES/wcnss_filter_intermediates/wcnss_filter ${BUILD_OUTPUT_BT_DIR}/
	@echo build android-x86 bluetooth user components done

copy_bsp_patch:
	@echo Copy PATCH files to Android-x86 BSP
	cp ${BT_PATCH_FILE_TOPDIR}/x86/* ${CUST_PROJ_PATH}
	cp ${BSP_PATCH_FILE_TOPDIR}/bt_host_ver.h ${CUST_PROJ_PATH}/
	@echo Copy PATCH DONE!

